
/* eslint-disable no-unused-vars */
/* eslint-disable no-underscore-dangle */
const cors = require('cors');
const express = require('express');
const path = require('path');

if (process.env.RUN_ENV === 'local') {
  const envPath = path.resolve(__dirname, '../resources/xms-gateway-local.properties');
  // eslint-disable-next-line global-require
  require('dotenv').config({ path: envPath });
}

const logger = require('./utils/logger');
const secrets = require('./utils/aws-secrets-manager');
const appState = require('./state');
const eurekaClient = require('./eureka-client');
const cxRequests = require('./handlers/cxengage-requests');
const errors = require('./utils/errors');

const publicApp = require('./public-app');
const serviceApp = require('./service-app');

const {
  CXENGAGE_REGION,
  CXENGAGE_ENVIRONMENT,
  CXENGAGE_DOMAIN,
} = process.env;

// If post is not configured we default to 8080
const SERVICE_PORT = process.env.SERVICE_PORT || 8080;
const PUBLIC_PORT = process.env.PUBLIC_PORT || 9080;

// Root directory
global.__basedir = __dirname;

// -------------------------------------------
// Service app
serviceApp.listen(SERVICE_PORT, () => {
  logger.info('Service: Listening on port: ', SERVICE_PORT);
}).on('error', (error) => {
  logger.error('Service: Error happened: ', error.message);
  onServerError(error);
});

// -------------------------------------------
// Public app
publicApp.listen(PUBLIC_PORT, async () => {
  logger.info('onPublicListening: Listening on port: ', PUBLIC_PORT);
  logger.debug(`onPublicListening: AWS_ROLE_ARN: ${process.env.AWS_ROLE_ARN}`);
  logger.debug('onPublicListening: ENV: ', process.env);
  logger.debug(`onPublicListening: CXENGAGE_REGION: ${process.env.CXENGAGE_REGION}`);
  logger.debug(`onPublicListening: CXENGAGE_ENVIRONMENT: ${process.env.CXENGAGE_ENVIRONMENT}`);

  // Get the AWS secret for accessing CX APIs
  const cxSecretName = secrets.getCxEngageSecretName();
  const secretRes = await secrets.getSecretValue(cxSecretName);
  if (secretRes.status > errors.STATUS_NO_ERROR) {
    logger.error('failed to acquire required secret: ', secretRes);
    // We need to report health error
    appState.setAppStateError(
      'failed to acquire secret',
    );
    return;
  }

  // Store the CX secret
  const cxAuthSecret = secretRes.body.data;
  secrets.storeSecret(cxSecretName, cxAuthSecret.SecretString);

  // Register with eureka discovery service
  const eurekaResult = await eurekaClient.initConnection();
  if (eurekaResult.status > errors.STATUS_NO_ERROR) {
    logger.error('failed to initialize eureka client', eurekaResult);
    // We need to report health error
    appState.setAppStateError(
      'failed to initialize eureka client',
    );
    return;
  }

  // Register xms gateway
  registerGateway();

  logger.info('onPublicListening: all done...');
}).on('error', (error) => {
  logger.error('Public: Error happened: ', error.message);
  onServerError(error);
});

/**
 * HTTP server error event.
 */
function onServerError(error) {
  logger.error('onServerError: error:', error);

  // Report health error for this pod
  appState.setAppStateError(
    error,
    'server error',
  );

  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error('onServerError: Requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error('onServerError: Port is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }

  // TODO: Remove eureka registration
}

/**
 * Send request to register the xms services gateway
 * So that we can receive the async actions generated by the core
 *
 */
async function registerGateway() {
  const payload = {
    type: 'xms',
    // url: `https://${CXENGAGE_REGION}-${CXENGAGE_ENVIRONMENT}-xms-gateway.${CXENGAGE_DOMAIN}`,
    url: 'https://8c5d-159-2-180-142.ngrok-free.app',
    actions: [
      {
        name: 'verify-credentials',
        target: '/tenants/:tenant-id/interactions/:interaction-id/actions/verify-credentials',
      },
      {
        name: 'verify-certificate',
        target: '/tenants/:tenant-id/interactions/:interaction-id/actions/verify-credentials',
      },
      {
        name: 'dial',
        target: '/tenants/:tenant-id/interactions/:interaction-id/actions/dial',
      },
      {
        name: 'add-participant',
        target: '/tenants/:tenant-id/interactions/:interaction-id/actions/participant',
      },
      {
        name: 'play-media',
        target: '/tenants/:tenant-id/interactions/:interaction-id/actions/play-media',
      },
    ],
    subscriptions: [],
    jobs: [],
  };
  logger.debug('registerGateway: payload: ', payload);

  const gatewayRes = cxRequests.postRequest('gateways', payload);
  if (gatewayRes.status > errors.STATUS_NO_ERROR) {
    logger.error('Failed to register gateway: res: ', gatewayRes);
    return false;
  }
  return true;
}
